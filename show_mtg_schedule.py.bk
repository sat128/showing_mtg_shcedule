#!/usr/bin/python
# -*- coding:utf-8 -*-
import datetime
import time
import sys
import os
picdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'pic')
libdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'lib')
if os.path.exists(libdir):
    sys.path.append(libdir)

import logging
from waveshare_epd import epd2in7b
import time
from PIL import Image,ImageDraw,ImageFont
import traceback


# データのイメージ
# リストでもたせる。[['開始時刻', '終了時刻'], ['開始時刻', '終了時刻'], ['開始時刻', '終了時刻'], ...]
sample_mtg = [['14:00', '15:00'], ['15:00', '16:00']]
list_mtg = sample_mtg.copy()
[h.append(0) for h in list_mtg]


################# MTG一覧表示関数定義 ################
def draw_schedule(list_mtg_schedule):
    list_notfinished = []

    # 終了済みMTGの削除
    for i in list_mtg_schedule[:5]:
        if i[2] != 2:
            list_notfinished.append([i[0] + ' - ' +i[1], i[2]])

    for j in range(6 - len(list_notfinished)):
        list_notfinished.append(['', ''])

    # 一番直近のMTG statusが「1」(on going)の場合は、赤枠付きで表示。無ければモノクロ表示。
    if list_notfinished[0][1] == 1:
        try:
            epd = epd2in7b.EPD()
            epd.init()
            #epd.Clear()
            #time.sleep(1)
            
            # Drawing on the image
            blackimage = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
            redimage = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
            
            font24 = ImageFont.truetype(os.path.join(picdir, 'Font.ttc'), 24)
        
            # Drawing on the Vertical image
            LBlackimage = Image.new('1', (epd.width, epd.height), 255)  # 126*298
            LRedimage = Image.new('1', (epd.width, epd.height), 255)  # 126*298
            drawblack = ImageDraw.Draw(LBlackimage)
            drawred = ImageDraw.Draw(LRedimage)
            
            drawred.rectangle((0, 0, 176, 12), fill = 0) # 上の枠
            drawred.rectangle((0, 0, 12, 264), fill = 0) # 左の枠
            drawred.rectangle((0, 252, 176, 264), fill = 0) # 下の枠
            drawred.rectangle((164, 0, 176, 264), fill = 0) # 右の枠
            drawred.text((20, 15), 'MTG ongoin\'', font = font24, fill = 0)
            drawblack.line((15, 48, 161, 48), fill = 0)
            drawred.text((20, 60), list_notfinished[0][0], font = font24, fill = 0)
            drawblack.text((20, 90), list_notfinished[1][0], font = font24, fill = 0)
            drawblack.text((20, 120), list_notfinished[2][0], font = font24, fill = 0)
            drawblack.text((20, 150), list_notfinished[3][0], font = font24, fill = 0)
            drawblack.text((20, 180), list_notfinished[4][0], font = font24, fill = 0)
            drawblack.text((20, 210), list_notfinished[5][0], font = font24, fill = 0)
            epd.display(epd.getbuffer(LBlackimage), epd.getbuffer(LRedimage))
            
        except IOError as e:
            logging.info(e)
            
        except KeyboardInterrupt:    
            logging.info("ctrl + c:")
            epd2in7b.epdconfig.module_exit()
            exit()
    else:
        try:
            epd = epd2in7b.EPD()
            epd.init()
            #epd.Clear()
            #time.sleep(1)
            
            # Drawing on the image
            blackimage = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
            redimage = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
            
            font24 = ImageFont.truetype(os.path.join(picdir, 'Font.ttc'), 24)
        
            # Drawing on the Vertical image
            LBlackimage = Image.new('1', (epd.width, epd.height), 255)  # 126*298
            LRedimage = Image.new('1', (epd.width, epd.height), 255)  # 126*298
            drawblack = ImageDraw.Draw(LBlackimage)
            drawred = ImageDraw.Draw(LRedimage)
            
            drawblack.text((20, 15), 'Today\'s MTG', font = font24, fill = 0)
            drawblack.line((15, 48, 161, 48), fill = 0)
            drawblack.text((20, 60), list_notfinished[0][0], font = font24, fill = 0)
            drawblack.text((20, 90), list_notfinished[1][0], font = font24, fill = 0)
            drawblack.text((20, 120), list_notfinished[2][0], font = font24, fill = 0)
            drawblack.text((20, 150), list_notfinished[3][0], font = font24, fill = 0)
            drawblack.text((20, 180), list_notfinished[4][0], font = font24, fill = 0)
            drawblack.text((20, 210), list_notfinished[5][0], font = font24, fill = 0)
            epd.display(epd.getbuffer(LBlackimage), epd.getbuffer(LRedimage))
            
        except IOError as e:
            logging.info(e)
            
        except KeyboardInterrupt:    
            logging.info("ctrl + c:")
            epd2in7b.epdconfig.module_exit()
            exit()

################# MTG一覧表示関数の実行 ################

# MTGステータスの初期値を格納
sum_status = sum([j[2] for j in list_mtg])
draw_schedule(list_mtg)

# 実際に動かすところ
while True:
    # ファイルを毎回とってくる

    # 終了時刻が過ぎていないものをとってくる
    i = []
    for i in list_mtg:
        current_time = datetime.datetime.now().time()
        start_time = (datetime.datetime.strptime(i[0], '%H:%M') - datetime.timedelta(minutes=2)).time()
        end_time = datetime.datetime.strptime(i[1], '%H:%M').time()
        if i[2] == 1:
            # ステータス1でも終了時刻になったら、ステータス更新。MTG一覧表示に変更
            if end_time < current_time:
                print('MTG終わったね')
                print('MTG一覧を表示するようにするよ。')
                i[2] = 2
                print(i)
                print(list_mtg)
                ################# MTG一覧表示関数の実行 ################
                #draw_schedule(list_mtg)
            else:
                print('すでにMTG中と表示されてるね。')
                print(i)

        elif start_time < current_time and current_time < end_time:
            print('始まるよ')
            print('電子ペーパーでMTG中って表示するよ。')
            i[2] = 1
            print(i)
            print(list_mtg)
            ################# MTG中！！って表示する関数の実行 ################
            #draw_schedule(list_mtg)
        elif current_time < start_time:
            print('まだ始まってないよ')
            print(i)

        else:
            print('もう終わったよ')
            i[2] = 2
            print(i)

    # MTGステータスが前回から変更されている場合のみ、電子ペーパーに描画
    if sum_status != sum([j[2] for j in list_mtg]):
        # 電子ペーパーに描画
        draw_schedule(list_mtg)
        # MTGステータスの更新
        sum_status = sum([j[2] for j in list_mtg])

    time.sleep(30)
    print('')

